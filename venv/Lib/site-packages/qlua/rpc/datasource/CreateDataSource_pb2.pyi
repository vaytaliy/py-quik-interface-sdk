# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

IntervalValue = typing___NewType('IntervalValue', builtin___int)
type___IntervalValue = IntervalValue
Interval: _Interval
class _Interval(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[IntervalValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    UNDEFINED = typing___cast(IntervalValue, 0)
    INTERVAL_TICK = typing___cast(IntervalValue, 1)
    INTERVAL_M1 = typing___cast(IntervalValue, 2)
    INTERVAL_M2 = typing___cast(IntervalValue, 3)
    INTERVAL_M3 = typing___cast(IntervalValue, 4)
    INTERVAL_M4 = typing___cast(IntervalValue, 5)
    INTERVAL_M5 = typing___cast(IntervalValue, 6)
    INTERVAL_M6 = typing___cast(IntervalValue, 7)
    INTERVAL_M10 = typing___cast(IntervalValue, 8)
    INTERVAL_M15 = typing___cast(IntervalValue, 9)
    INTERVAL_M20 = typing___cast(IntervalValue, 10)
    INTERVAL_M30 = typing___cast(IntervalValue, 11)
    INTERVAL_H1 = typing___cast(IntervalValue, 12)
    INTERVAL_H2 = typing___cast(IntervalValue, 13)
    INTERVAL_H4 = typing___cast(IntervalValue, 14)
    INTERVAL_D1 = typing___cast(IntervalValue, 15)
    INTERVAL_W1 = typing___cast(IntervalValue, 16)
    INTERVAL_MN1 = typing___cast(IntervalValue, 17)
UNDEFINED = typing___cast(IntervalValue, 0)
INTERVAL_TICK = typing___cast(IntervalValue, 1)
INTERVAL_M1 = typing___cast(IntervalValue, 2)
INTERVAL_M2 = typing___cast(IntervalValue, 3)
INTERVAL_M3 = typing___cast(IntervalValue, 4)
INTERVAL_M4 = typing___cast(IntervalValue, 5)
INTERVAL_M5 = typing___cast(IntervalValue, 6)
INTERVAL_M6 = typing___cast(IntervalValue, 7)
INTERVAL_M10 = typing___cast(IntervalValue, 8)
INTERVAL_M15 = typing___cast(IntervalValue, 9)
INTERVAL_M20 = typing___cast(IntervalValue, 10)
INTERVAL_M30 = typing___cast(IntervalValue, 11)
INTERVAL_H1 = typing___cast(IntervalValue, 12)
INTERVAL_H2 = typing___cast(IntervalValue, 13)
INTERVAL_H4 = typing___cast(IntervalValue, 14)
INTERVAL_D1 = typing___cast(IntervalValue, 15)
INTERVAL_W1 = typing___cast(IntervalValue, 16)
INTERVAL_MN1 = typing___cast(IntervalValue, 17)
type___Interval = Interval

class Args(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class_code: typing___Text = ...
    sec_code: typing___Text = ...
    interval: type___IntervalValue = ...
    param: typing___Text = ...

    def __init__(self,
        *,
        class_code : typing___Optional[typing___Text] = None,
        sec_code : typing___Optional[typing___Text] = None,
        interval : typing___Optional[type___IntervalValue] = None,
        param : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"class_code",b"class_code",u"interval",b"interval",u"param",b"param",u"sec_code",b"sec_code"]) -> None: ...
type___Args = Args

class Result(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    datasource_uuid: typing___Text = ...
    error_desc: typing___Text = ...
    is_error: builtin___bool = ...

    def __init__(self,
        *,
        datasource_uuid : typing___Optional[typing___Text] = None,
        error_desc : typing___Optional[typing___Text] = None,
        is_error : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"datasource_uuid",b"datasource_uuid",u"error_desc",b"error_desc",u"result",b"result"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"datasource_uuid",b"datasource_uuid",u"error_desc",b"error_desc",u"is_error",b"is_error",u"result",b"result"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"result",b"result"]) -> typing_extensions___Literal["datasource_uuid","error_desc"]: ...
type___Result = Result
